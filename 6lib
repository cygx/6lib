#!/usr/bin/env perl6
use v6;

# Copyright 2019 cygx <cygx@cpan.org>
# Distributed under the Boost Software License, Version 1.0

use fatal;
use nqp;

PROCESS::<$PROGRAM-NAME> := '6lib';

my \repo = my $ = '.6lib'.IO;
my \idx = my $ = repo.add('lib.list');

sub load($_, :$set) {
    my %set;
    for .lines {
        when .starts-with('+') { %set{.substr(1)} := True }
        when .starts-with('-') { %set{.substr(1)}:delete }
    }
    $set ?? %set !! %set.keys.sort;
}

sub with-file($file, &block = {;}, *%_) {
    given $file.open(|%_) {
        LEAVE .close;
        .&block;
    }
}

sub rmtree($_, $root = $_, :%keep) {
    for .dir {
        when .d && !.l {
            .&rmtree($root, :%keep)
                unless %keep && (%keep{.relative($root)}:exists);
        }
        default {
            unless %keep && (%keep{.relative($root)}:exists) {
                try .unlink;
                note "-{.relative($root)}" if $*logged;
            }
        }
    }
    try .rmdir;
}

sub lntree($_, $root = $_, :$take) {
    for .dir(test => *.starts-with('.').not) {
        when .d && !.l { .&lntree($root, :$take) }
        default {
            my $path = .relative($root);
            my $link = repo.add($path);
            unless $link.l && nqp::readlink(~$link) eq $_ {
                if $link.e { $link.unlink }
                else { $link.parent.mkdir }
                .symlink($link);
                note "+$path" if $*logged;
            }
            take $path if $take;
        }
    }
}

#| create repository in current working directory
multi MAIN('init') {
    repo.mkdir;
    idx.open(:x).close;
}

#| eagerly add libs to repository
multi MAIN('add', *@libs) {
    my $*logged = True;
    my %index := idx.&load(:set);
    my (%new, @todo, @notfound);

    for @libs {
        my $dir = .IO.resolve;
        my $libdir = $dir.add('lib');
        my $key = ~$dir;
        if $libdir.d {
            %new{$key} = True unless %index{$key}:exists;
            @todo.push($libdir);
        }
        else { @notfound.push($_) }
    }

    .&lntree for @todo;

    with-file idx, :a, -> $out {
        $out.print("\n+$_")
            for %new.keys.sort;
    }

    note 'not found: ', @notfound.join(', ')
        if @notfound;
}

#| lazily remove libs from repository
multi MAIN('rm', *@libs) {
    my %index := idx.&load(:set);
    my @unknown;

    with-file idx, :a, -> $out {
        for @libs {
            my $key = ~.IO.resolve;
            if %index{$key}:exists {
                $out.print("\n-$key");
            }
            else { @unknown.push($_) }
        }
    }

    note 'not indexed: ', @unknown.join(', ')
        if @unknown;
}

#| synchronize repository with indexed libs
multi MAIN('sync') {
    my $*logged = True;
    my @libs = idx.&load;
    my %keep = idx.basename => True, '.precomp' => True;
    my @missing;

    for @libs {
        my $libdir = .IO.add('lib');
        if $libdir.d {
            %keep{$_} = True
                for gather  $libdir.&lntree(:take);
        }
        else { @missing.push($_) }
    }

    repo.&rmtree(:%keep);

    with-file idx, :w, -> $out {
        $out.print("\n+$_")
            for @libs;
    }

    note 'not found: ', @missing.join(', ')
        if @missing;
}

#| list indexed libs
multi MAIN('list') {
    .put for idx.&load;
}

#| lazily remove missing libs from index
multi MAIN('prune') {
    my @libs = idx.&load;
    with-file idx, :a, -> $out {
        for @libs {
            unless .IO.add('lib').d {
                note $_;
                $out.print("\n-$_");
            }
        }
    }
}

#| delete precompilation cache
multi MAIN('flush') {
    repo.add('.precomp').&rmtree;
}

#| clear repository but keep index
multi MAIN('clear') {
    repo.&rmtree(:keep{ idx.basename => True });
}

#| remove repository
multi MAIN('clobber') {
    repo.&rmtree;
}

#| specify location of target repository
multi MAIN(IO() $dir, *@command, Bool :$C!) {
    repo = $dir.add(repo.basename);
    idx = repo.add(idx.basename);
    MAIN |@command;
    CATCH { when X::Multi::NoMatch { note $*USAGE } }
}
